-- VHDL Entity Ali.Microprocessor_8_bits.symbol
--
-- Created:
--          by - Lenovo.UNKNOWN (DESKTOP-LUUUGA3)
--          at - 21:43:07 01/ 4/2024
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2007.1 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Microprocessor_8_bits IS
   PORT( 
      clk   : IN     std_logic;
      Value : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END Microprocessor_8_bits ;

--
-- VHDL Architecture Ali.Microprocessor_8_bits.struct
--
-- Created:
--          by - Lenovo.UNKNOWN (DESKTOP-LUUUGA3)
--          at - 21:43:07 01/ 4/2024
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2007.1 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

LIBRARY Ali;

ARCHITECTURE struct OF Microprocessor_8_bits IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL alu_op     : std_logic_vector(1 DOWNTO 0);
   SIGNAL alu_src    : std_logic;
   SIGNAL data_out   : std_logic_vector(7 DOWNTO 0);
   SIGNAL next_instr : std_logic_vector(2 DOWNTO 0);
   SIGNAL op         : std_logic_vector(1 DOWNTO 0);
   SIGNAL rd_addr    : std_logic_vector(1 DOWNTO 0);
   SIGNAL reg_dst    : std_logic;
   SIGNAL rs         : std_logic_vector(7 DOWNTO 0);
   SIGNAL rs_addr    : std_logic_vector(1 DOWNTO 0);
   SIGNAL rt         : std_logic_vector(7 DOWNTO 0);
   SIGNAL rt_addr    : std_logic_vector(1 DOWNTO 0);
   SIGNAL y          : std_logic_vector(1 DOWNTO 0);
   SIGNAL y1         : std_logic_vector(7 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL Value_internal : std_logic_vector (7 DOWNTO 0);


   -- Component Declarations
   COMPONENT ALU
   PORT (
      op : IN     std_logic_vector (1 DOWNTO 0);
      rs : IN     std_logic_vector (7 DOWNTO 0);
      rt : IN     std_logic_vector (7 DOWNTO 0);
      rd : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT CU
   PORT (
      instr   : IN     std_logic_vector (1 DOWNTO 0);
      alu_op  : OUT    std_logic_vector (1 DOWNTO 0);
      alu_src : OUT    std_logic;
      reg_dst : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Instruction_Memory
   PORT (
      instr_addr : IN     std_logic_vector (2 DOWNTO 0);
      op         : OUT    std_logic_vector (1 DOWNTO 0);
      rd_addr    : OUT    std_logic_vector (1 DOWNTO 0);
      rs_addr    : OUT    std_logic_vector (1 DOWNTO 0);
      rt_addr    : OUT    std_logic_vector (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT PC
   PORT (
      clk        : IN     std_logic;
      next_instr : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Registers
   PORT (
      clk     : IN     std_logic;
      rd_addr : IN     std_logic_vector (1 DOWNTO 0);
      rs_addr : IN     std_logic_vector (1 DOWNTO 0);
      rt_addr : IN     std_logic_vector (1 DOWNTO 0);
      wr_data : IN     std_logic_vector (7 DOWNTO 0);
      rs      : OUT    std_logic_vector (7 DOWNTO 0);
      rt      : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mux0
   PORT (
      a   : IN     std_logic_vector (1 DOWNTO 0);
      b   : IN     std_logic_vector (1 DOWNTO 0);
      sel : IN     std_logic;
      y   : OUT    std_logic_vector (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mux1
   PORT (
      a   : IN     std_logic_vector (7 DOWNTO 0);
      b   : IN     std_logic_vector (7 DOWNTO 0);
      sel : IN     std_logic;
      y   : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT sign_extend
   PORT (
      data_in  : IN     std_logic_vector (1 DOWNTO 0);
      data_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ALU USE ENTITY Ali.ALU;
   FOR ALL : CU USE ENTITY Ali.CU;
   FOR ALL : Instruction_Memory USE ENTITY Ali.Instruction_Memory;
   FOR ALL : PC USE ENTITY Ali.PC;
   FOR ALL : Registers USE ENTITY Ali.Registers;
   FOR ALL : mux0 USE ENTITY Ali.mux0;
   FOR ALL : mux1 USE ENTITY Ali.mux1;
   FOR ALL : sign_extend USE ENTITY Ali.sign_extend;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : ALU
      PORT MAP (
         op => alu_op,
         rs => rs,
         rt => y1,
         rd => Value_internal
      );
   U_1 : CU
      PORT MAP (
         instr   => op,
         alu_op  => alu_op,
         alu_src => alu_src,
         reg_dst => reg_dst
      );
   U_2 : Instruction_Memory
      PORT MAP (
         instr_addr => next_instr,
         op         => op,
         rs_addr    => rs_addr,
         rt_addr    => rt_addr,
         rd_addr    => rd_addr(1 DOWNTO 0)
      );
   U_3 : PC
      PORT MAP (
         clk        => clk,
         next_instr => next_instr
      );
   U_5 : Registers
      PORT MAP (
         clk     => clk,
         rs_addr => rs_addr,
         rt_addr => rt_addr,
         rd_addr => y,
         wr_data => Value_internal(7 DOWNTO 0),
         rs      => rs,
         rt      => rt
      );
   U_4 : mux0
      PORT MAP (
         a   => rt_addr(1 DOWNTO 0),
         b   => rd_addr(1 DOWNTO 0),
         sel => reg_dst,
         y   => y
      );
   U_6 : mux1
      PORT MAP (
         a   => rt,
         b   => data_out,
         sel => alu_src,
         y   => y1
      );
   U_7 : sign_extend
      PORT MAP (
         data_in  => rd_addr(1 DOWNTO 0),
         data_out => data_out
      );

   -- Implicit buffered output assignments
   Value <= Value_internal;

END struct;
