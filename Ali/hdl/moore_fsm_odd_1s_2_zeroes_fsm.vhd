-- VHDL Entity Ali.Moore_FSM_odd_1s_2_zeroes.symbol
--
-- Created:
--          by - Lab 107.UNKNOWN (DESKTOP-7DIT156)
--          at - 21:37:33 12/ 4/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2007.1 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Moore_FSM_odd_1s_2_zeroes IS
   PORT( 
      In0 : IN     std_logic_vector (15 DOWNTO 0);
      clk : IN     std_logic;
      rst : IN     std_logic;
      x   : IN     std_logic;
      y   : OUT    std_logic
   );

-- Declarations

END Moore_FSM_odd_1s_2_zeroes ;

--
-- VHDL Architecture Ali.Moore_FSM_odd_1s_2_zeroes.fsm
--
-- Created:
--          by - Lab 107.UNKNOWN (DESKTOP-7DIT156)
--          at - 21:37:33 12/ 4/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2007.1 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF Moore_FSM_odd_1s_2_zeroes IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '1') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      x
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (x = '1') THEN 
               next_state <= s1;
            ELSIF (x = '0') THEN 
               next_state <= s2;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (x = '1') THEN 
               next_state <= s0;
            ELSIF (x = '0') THEN 
               next_state <= s3;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (x = '0') THEN 
               next_state <= s4;
            ELSIF (x = '1') THEN 
               next_state <= s1;
            ELSE
               next_state <= s2;
            END IF;
         WHEN s3 => 
            IF (x = '1') THEN 
               next_state <= s0;
            ELSIF (x = '0') THEN 
               next_state <= s5;
            ELSE
               next_state <= s3;
            END IF;
         WHEN s4 => 
            IF (x = '1') THEN 
               next_state <= s5;
            ELSIF (x = '0') THEN 
               next_state <= s4;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s5 => 
            IF (x = '0') THEN 
               next_state <= s5;
            ELSIF (x = '1') THEN 
               next_state <= s4;
            ELSE
               next_state <= s5;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            y <= '0' ;
         WHEN s1 => 
            y <= '0' ;
         WHEN s2 => 
            y <= '0' ;
         WHEN s3 => 
            y <= '0' ;
         WHEN s4 => 
            y <= '0' ;
         WHEN s5 => 
            y <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
